grothendieck {
  # Identifier used when connecting to other clients
  client-id = "grothendieck"

  # Version string (reported by an RPC method)
  client-version = "grothendieck/v0.1"

  # Base directory where all the data used by the node is stored, including blockchain data and private keys
  datadir = "~/.grothendieck/"

  # The unencrypted private key of this node
  keys-file = ${grothendieck.datadir}"nodeId.keys"

  # Keystore directory: stores encrypted private keys of accounts managed by this node
  keystore-dir = ${grothendieck.datadir}"keystore"

  # timeout for shutting down the ActorSystem
  shutdown-timeout = "15.seconds"

  # one of the algorithms defined here:
  # https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#SecureRandom
  secure-random-algo = "NativePRNG"

  network {
    # Ethereum protocol version
    protocol-version = "1"

    server-address {
      # Listening interface for Ethereum protocol connections
      interface = "127.0.0.1"

      # Listening port for Ethereum protocol connections
      port = 9076
    }

    discovery {
      # Set of initial nodes
      bootstrap-nodes = [
        "enode://18a551bee469c2e02de660ab01dede06503c986f6b8520cb5a65ad122df88b17b285e3fef09a40a0d44f99e014f8616cf1ebc2e094f96c6e09e2f390f5d34857@47.90.36.129:30303",
        "enode://2521b2616f795f3eb21757b52908978783a5eb8c35850e5934015f713d00bb476370176264b5b678b88e4e14bed4196476627f7e079d67bf0c02622c0fe7d9d7@125.134.78.189:30303",
        "enode://3f5f14647126dc39323447e22cb548369e1377a4e789ad48a6dc6680df1a39a28c46d36e79165fa155fdfaa67337d9703e1f029d5a788306fdef2030669a3bba@50.64.94.28:30303",
        "enode://4fca8ecaf9bd12b805b2b99d2ed6a28e62223707d16c53dd746e2a70f067308b0d8d9a769412f9b323b3410083dfef3eeadd139fd6946535692c1b31467f1080@159.203.78.75:30303",
        "enode://57be9e74b22ff3ea1bd3fedeb2ced310387dd176866793e273c7712305d8e4677f8913c86f93dfa8810e1cdb4177e5f87112db8748199a7771baf8dced63688b@104.41.188.223:30303",
        "enode://94072bbbf1d3e5648afc573bbaf79b14a26ac48380f635fde32782631329263fe7a347251079f9abd3a2678f5bc5e672f8e6aff93a27f0f8f4e0e4f961dac68d@1.226.84.230:50303",
        "enode://98b863da48ab8bef2339a823d552f3619fd8e892425ae40c6812c6f7e4a0afb4f9591b012183e89a63bb01c5085d0e96aa5f0812652335fb0ac946d6aaf15881@118.178.57.121:30303",
        "enode://fba5a07e283d517a2680bcfc7aeb498ac2d246d756556a2ebd5edeb39496491c47a6d27e27f82833b7d7d12defc8de994de04bb58beb72472649f9a323006820@41.135.121.6:30303"
      ]

      # Time interval for scanning bootstrap nodes
      # TODO: explain better
      bootstrap-nodes-scan-interval = 2 minutes
    }

    peer {
      # Retry delay for failed attempt at connecting to a peer
      connect-retry-delay = 20 seconds

      # Maximum number of attempts to connect to a peer
      # TODO: what happens after that? blacklisting?
      connect-max-retries = 30

      # TODO: what's this for? why delay a PoisonPill
      disconnect-poison-pill-timeout = 5 seconds

      # Timeout for 'Hello' message from peer (during handshake)
      wait-for-hello-timeout = 3 seconds

      # Timeout for 'Status' message from peer (during handshake)
      wait-for-status-timeout = 30 seconds

      # Timeout for block header message that determines the current Ethereum fork (during handshake)
      wait-for-chain-check-timeout = 15 seconds

      # Maximum block headers in a single message
      max-blocks-headers-per-message = 200

      # Maximum block bodies in a single message
      max-blocks-bodies-per-message = 200

      # Maximum transactions receipts in a single message
      max-receipts-per-message = 200

      # Maximum MPT components in a single message
      max-mpt-components-per-message = 400

      # Maximum connected peers
      max-peers = 10

      # Ethereum network identifier:
      # 1 - mainnet, 2 - morden
      # TODO: other ids?
      network-id = 1
    }

    rpc {
      # Whether to enable JSON-RPC HTTP endpoint
      enabled = true

      # Listening address of JSON-RPC HTTP endpoint
      interface = "127.0.0.1"

      # Listening port of JSON-RPC HTTP endpoint
      port = 8546

      # Enabled JSON-RPC APIs over the HTTP endpoint
      # Available choices are: eth, web3, net, personal
      apis = "eth,web3,net"
    }
  }

  txPool {
    # Maximum number of pending transaction kept in the pool
    tx-pool-size = 1000

    # Timeout for querying the transaction pool
    # TODO: do we have 2 timeouts for this? This and mining.pooling-services-timeout ?
    pending-tx-manager-query-timeout = 5.seconds
  }

  mining {
    # Maximum number of ommers kept in the pool
    ommers-pool-size = 30

    # Block cache size
    block-cashe-size = 30

    # Miner's coinbase address
    coinbase = "0011223344556677889900112233445566778899"

    # Timeout for accessing ommer and TX pools
    pooling-services-timeout = 5.seconds
  }

  blockchain {
    # Frontier block number
    frontier-block-number = "0"

    # Homestead fork block number
    homestead-block-number = "1150000"

    # EIP-150 fork block number
    eip150-block-number = "2500000"

    # EIP-160 fork block number
    eip160-block-number = "3000000"

    # Difficulty bomb pause block number
    # Doc: https://github.com/ethereumproject/ECIPs/blob/master/ECIPs/ECIP-1010.md
    difficulty-bomb-pause-block-number = "3000000"

    # Difficulty bomb continuation block number
    # Doc: https://github.com/ethereumproject/ECIPs/blob/master/ECIPs/ECIP-1010.md
    difficulty-bomb-continue-block-number = "5000000"

    # DAO fork block number (Ethereum HF/Classic split)
    # https://blog.ethereum.org/2016/07/20/hard-fork-completed/
    dao-fork-block-number = "1920000"

    # Total difficulty at the DAO hard fork block
    # TODO: why do we need this? isn't the hash enough?
    dao-fork-block-total-difficulty = "39490964433395682584"

    # The hash of the accepted DAO fork block
    dao-fork-block-hash = "94365e3a8c0b35089c1d1195081fe7489b528a84b22199c916180db8b28ade7f"

    # Starting nonce a an empty account. Some networks (like Morden) use different values.
    account-start-nonce = "0"

    # The ID of the accepted chain
    chain-id = "3d"

    # Custom genesis JSON file
    custom-genesis-file = null

    # Monetary policy parameters
    # Doc: https://github.com/ethereumproject/ECIPs/blob/master/ECIPs/ECIP-1017.md
    monetary-policy {
      # Block reward in the first era
      first-era-block-reward = "5000000000000000000"

      # Monetary policy era duration in number of blocks
      era-duration = 5000000

      # Rate at which rewards get reduced in successive eras.
      # Value in range [0.0, 1.0]
      reward-reduction-rate = 0.2
    }
  }

  sync {
    # Whether to enable fast-sync
    do-fast-sync = true

    # TODO: explain
    peers-scan-interval = 3.seconds

    # Duration for blacklisting a peer
    # TODO: explain better, reasons for blacklisting?
    blacklist-duration = 30.seconds

    # TODO: explain
    start-retry-interval = 5.seconds

    # TODO: explain
    sync-retry-interval = 5.seconds

    # TODO: explain
    peer-response-timeout = 10.seconds

    # TODO: explain
    print-status-interval = 2.seconds

    # TODO: explain
    persist-state-snapshot-interval = 1.minute

    # Maximum concurrent requests when in fast-sync mode
    max-concurrent-requests = 50

    # TODO: how do these setting correlate with the similar ones defined in network?
    block-headers-per-request = 2048
    block-bodies-per-request = 128
    receipts-per-request = 60
    nodes-per-request = 1000

    # Minimum number of peers required to determine the target block for fast-sync
    min-peers-to-choose-target-block = 2

    # During fast-sync when most up to date block is determined from peers, the actual target block number
    # will be decreased by this value
    target-block-offset = 500

    # TODO: explain
    check-for-new-block-interval = 1.seconds

    # TODO: explain
    block-resolving-depth = 20
  }

  db {
    # TODO: not used
    iodb {
      path = ${grothendieck.datadir}"iodb/"
    }
    leveldb {
      # LevelDB data directory
      path = ${grothendieck.datadir}"leveldb/"

      # Create DB data directory if it's missing
      create-if-missing = true

      # Should the DB raise an error as soon as it detects an internal corruption
      paranoid-checks = true

      # Force checksum verification of all data that is read from the file system on behalf of a particular read
      verify-checksums = true // force checksum verification of all data that is read from the file system on behalf of a particular read

      # TODO: explain
      cache-size = 0
    }
  }

  filter {
    # Time at which a filter remains valid
    filter-timeout = 10.minutes

    # Timeout for quering filter manager
    filter-manager-query-timeout = 3.seconds
  }

}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  logger-startup-timeout = 30s
}
